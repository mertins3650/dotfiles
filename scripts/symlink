#!/usr/bin/env bash
set -x  # Enable command tracing
set -e  # Exit immediately if a command exits with a non-zero status

# Source directory
DOTFILES_DIR="$HOME/dotfiles"
# Destination directories
CONFIG_DIR="$HOME/.config"
LOCAL_DIR="$HOME/.local"

CONFIG_DIRS=("fuzzel" "ghostty" "hypr" "nvim" "sway" "swaync" "waybar")
CONFIG_FILES=(".tmux.conf" ".zshrc")
SCRIPT_DIR="scripts"

# Function to handle removal and symlink creation for .config directories
process_config_directory() {
    local dir="$1"
    local source_path="$DOTFILES_DIR/$dir"
    local dest_path="$CONFIG_DIR/$dir"

    echo "Processing config directory: $dir"

    # Ensure the source exists
    if [ ! -e "$source_path" ]; then
        echo "  Source does not exist: $source_path"
        return
    fi

    # Remove existing destination if it's a directory, file, or symlink
    if [ -d "$dest_path" ] || [ -f "$dest_path" ] || [ -L "$dest_path" ]; then
        echo "  Removing existing: $dest_path"
        if [ "$dry_run" = false ]; then
            rm -rf "$dest_path"
        fi
    fi

    # Create the symlink
    echo "  Creating symlink: $dest_path -> $source_path"
    if [ "$dry_run" = false ]; then
        ln -s "$source_path" "$dest_path"
    fi

    echo "  Symlink created."
}

# Function to handle removal and symlink creation for .config files
process_config_file() {
    local file="$1"
    local source_path="$DOTFILES_DIR/$file"
    local dest_path="$HOME/$file"

    echo "Processing config file: $file"

    # Ensure the source exists
    if [ ! -e "$source_path" ]; then
        echo "  Source does not exist: $source_path"
        return
    fi

    # Remove existing destination if it's a file or symlink
    if [ -f "$dest_path" ] || [ -L "$dest_path" ]; then
        echo "  Removing existing file: $dest_path"
        if [ "$dry_run" = false ]; then
            rm -f "$dest_path"
        fi
    fi

    # Create the symlink
    echo "  Creating symlink: $dest_path -> $source_path"
    if [ "$dry_run" = false ]; then
        ln -s "$source_path" "$dest_path"
    fi

    echo "  Symlink created."
}

# Function to handle removal and symlink creation for .local directories
process_local_directory() {
    local dir="$1"
    local source_path="$DOTFILES_DIR/$dir"
    local dest_path="$LOCAL_DIR/$dir"

    echo "Processing local directory: $dir"

    # Ensure the source exists
    if [ ! -e "$source_path" ]; then
        echo "  Source does not exist: $source_path"
        return
    fi

    # Remove existing destination if it's a directory, file, or symlink
    if [ -d "$dest_path" ] || [ -f "$dest_path" ] || [ -L "$dest_path" ]; then
        echo "  Removing existing: $dest_path"
        if [ "$dry_run" = false ]; then
            rm -rf "$dest_path"
        fi
    fi

    # Create the symlink
    echo "  Creating symlink: $dest_path -> $source_path"
    if [ "$dry_run" = false ]; then
        ln -s "$source_path" "$dest_path"
    fi

    echo "  Symlink created."
}

# Check for the --dry argument
dry_run=false
if [ "$1" == "--dry" ]; then
    dry_run=true
    echo "Dry run mode enabled. No changes will be made."
fi

# Create .config if it doesn't exist
if [ ! -d "$CONFIG_DIR" ]; then
    echo "Creating directory: $CONFIG_DIR"
    if [ "$dry_run" = false ]; then
        mkdir -p "$CONFIG_DIR"
    fi
fi

# Create .local if it doesn't exist
if [ ! -d "$LOCAL_DIR" ]; then
    echo "Creating directory: $LOCAL_DIR"
    if [ "$dry_run" = false ]; then
        mkdir -p "$LOCAL_DIR"
    fi
fi

# Loop through the config directories
for dir in "${CONFIG_DIRS[@]}"; do
    process_config_directory "$dir"
done

# Loop through the config files
for file in "${CONFIG_FILES[@]}"; do
    process_config_file "$file"
done

# Process the script directory
process_local_directory "$SCRIPT_DIR"

echo "Script finished."

